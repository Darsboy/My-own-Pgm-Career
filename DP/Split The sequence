#include <bits/stdc++.h>
using namespace std;
int N,K;
long long psa[100001];
long long dp[2][100001];
long long ans=-1;

int pre,now=1,cur=0;
int pos[202][100001];
int q[100001],l,r;




double slope(int p,int q)
{
    if(psa[p]==psa[q])return -1.0e8;
    return (double)(dp[pre][p]-psa[p]*psa[N]-dp[pre][q]+psa[q]*psa[N])/(double)(psa[q]-psa[p]);//<psa[i]

}
int main()
{
    scanf("%d%d",&N,&K);
    for(int i=1; i<=N; i++)
    {
        long long a;
        scanf("%lld",&a);
        psa[i]=a+psa[i-1];
    }

    /*

    4 1 3 4 0 2 3

    0 4 5


    for(int i=1,a; i<=n; i++)
    {

        printf("%d ",psa[i]);

    }
    printf("\n");
    */
    //dp[i][j]=dp[p][j-1]+(psa[i]-psa[p])*(psa[n]-psa[p])
    for(int k=1; k<=K; k++)
    {
        memset(dp[now],-1,sizeof(dp[now]));
        int last=0;
        l=r=0;
        for(int i=0; i<=N; i++)
        {


            while(l<r&&slope(q[l],q[l+1])<=psa[i])
            {
                l++;
            }
            int     j=q[l];

            long long tmp=dp[pre][j]+(psa[i]-psa[j])*(psa[N]-psa[i]);


            dp[now][i]=tmp;
            pos[k][i]=j;

            while(l<r&&slope(q[r-1],q[r])>=slope(q[r],i))
            {
                r--;
            }
            q[++r]=i;

            /*
            for(int j=last; j<i; j++)
            {
                long long tmp=dp[pre][j]+(psa[i]-psa[j])*(psa[N]-psa[i]);
                if(dp[now][i]<=tmp)
                {
                    last=j;
                    dp[now][i]=tmp;
                    pos[k][i]=j;
                }
            }
            */

        }


        pre^=1;
        now^=1;
    }
    // for(int j=0; j<=2; j++)
    for(int i=1; i<=N; i++)
    {
        if(ans<dp[pre][i])
        {
            ans=(dp[pre][i]);
            cur=i;
        }
        // printf("\n");
    }
    printf("%lld\n",ans);
    for(int i=K; i>=1; i--)
    {
        printf("%d ",cur);
        cur=pos[i][cur];

    }
}
